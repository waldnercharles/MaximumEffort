name: Build Project

on: [ push, pull_request, workflow_dispatch ]

jobs:
  build:
    name: "Build ${{ matrix.platform.name }}"
    runs-on: ${{ matrix.platform.os }}
    timeout-minutes: 20

    defaults:
      run:
        shell: bash

    strategy:
      # Don't cancel other in-progress builds if one fails.
      fail-fast: false
      matrix:
        platform:
          - { name: "Windows (MinGW)",        os: windows-latest, artifact: 'mingw',  generate: '-G "MinGW Makefiles"' }
          - { name: "Windows (MSVC 17 2022)", os: windows-latest, artifact: 'msvc17', generate: '-G "Visual Studio 17 2022" -A x64 -DCMAKE_BUILD_TYPE=Release' }
          - { name: "MacOS",                  os: macos-latest,   artifact: 'macos',  generate: '-G "Unix Makefiles"' }
          - { name: "Linux",                  os: ubuntu-latest,  artifact: 'linux',  generate: '-G "Unix Makefiles"' }
    steps:
      - uses: actions/checkout@main

      - name: Install OpenGL + Audio
        run: |
          sudo apt-get update -qq
          sudo apt-get install gcc-multilib
          sudo apt-get install libasound2-dev libpulse-dev
          sudo apt-get install -y --no-install-recommends libglfw3 libglfw3-dev libx11-dev libxcursor-dev libxrandr-dev libxinerama-dev libxi-dev libxext-dev libxfixes-dev
        if: matrix.platform.name == 'Linux'

      - name: Create build folder with CMake
        run: |
          cmake ${{ matrix.platform.generate }} -B build

      - name: Build project binary (non-MSVC)
        run: |
          cmake --build build
        if: matrix.platform.name != 'Windows (MSCV 17 2022)'

      # Default for MSVC is to build with Debug, so a special case is needed to produce
      # Release binaries.
      - name: Build project binary (MSVC)
        run: |
          cmake --build build --config Release
        if: matrix.platform.name == 'Windows (MSCV 17 2022)'

      # Just use robocopy since it doesn't trigger a build failure if it
      # fails to  find a file
      - name: Generate artifacts for Windows
        shell: cmd
        run: |
          robocopy build\Release dist MaximumEffort.exe 
          robocopy build dist MaximumEffort.exe
          7z a ${{ matrix.platform.artifact }}.zip .\dist\*
        if: runner.os == 'Windows'

      - name: Generate artifacts for MacOS
        run: |
          mkdir -p ./dist
          cp -R -v ./build/MaximumEffort ./dist
          tar -czvf ${{ matrix.platform.artifact }}.tar.gz -C dist .
        if: runner.os == 'macOS'

      - name: Generate artifacts for Linux
        run: |
          mkdir -p ./dist
          cp -v ./build/MaximumEffort ./dist
          tar -czvf ${{ matrix.platform.artifact }}.tar.gz -C dist .
        if: runner.os == 'Linux'

      # Uploads the zip archives onto the workflow. They can be downloaded for 90 days (by default).
      - uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ matrix.platform.artifact }}
          path: ./dist/*
